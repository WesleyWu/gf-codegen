// Code generated by gf-codegen. DO NOT EDIT.
// rpc provider 可执行程序
// 生成日期：{{.table.UpdateTime}}
// 生成人：{{.table.FunctionAuthor}}

package main

import (
	"context"
	"dubbo.apache.org/dubbo-go/v3/config"
	_ "dubbo.apache.org/dubbo-go/v3/imports"
	"{{.table.BackendPackage}}{{if .table.SeparatePackage}}/{{.table.GoFileName}}{{end}}/service"
	"github.com/gogf/gf/v2/errors/gerror"
	"github.com/gogf/gf/v2/frame/g"
	"github.com/gogf/gf/v2/os/gcmd"
	"github.com/gogf/gf/v2/os/gctx"
	"strconv"
)

func main() {
	command := gcmd.Command{
		Name: "{{.table.ClassName}} DubboGo Provider",
		Func: func(ctx context.Context, parser *gcmd.Parser) error {
			port := parser.GetOpt("port", "{{.table.RpcPort}}").String()
			if _, err := strconv.Atoi(port); err != nil {
				return gerror.New("需要指定整形的 port 参数，建议20000以上，不能和其他服务重复")
			}
			config.SetProviderService(service.{{.table.ClassName}})
			registryId := g.Cfg().MustGet(ctx, "rpc.registry.id", "nacosRegistry").String()
			registryProtocol := g.Cfg().MustGet(ctx, "rpc.registry.protocol", "nacos").String()
			registryAddress := g.Cfg().MustGet(ctx, "rpc.registry.address", "127.0.0.1:8848").String()
			registryConfigBuilder := config.NewRegistryConfigBuilder().
				SetProtocol(registryProtocol).
				SetAddress(registryAddress)
			registryNamespace := g.Cfg().MustGet(ctx, "rpc.registry.namespace", "public").String()
			if registryProtocol == "nacos" {
				registryConfigBuilder = registryConfigBuilder.SetNamespace(registryNamespace)
			}
			rootConfig := config.NewRootConfigBuilder().
				SetProvider(config.NewProviderConfigBuilder().
					AddService("{{.table.ClassName}}Impl", config.NewServiceConfigBuilder().
						Build()).
					Build()).
				AddRegistry(registryId, registryConfigBuilder.Build()).
				SetMetadataReport(config.NewMetadataReportConfigBuilder().
					SetProtocol(registryProtocol).
					SetAddress(registryAddress).Build()).
				AddProtocol("tripleKey", config.NewProtocolConfigBuilder().
					SetName("tri").
					SetPort(port).
					Build()).
				Build()
			if err := config.Load(config.WithRootConfig(rootConfig)); err != nil {
				return err
			}
            select {}
		},
	}
	command.Run(gctx.New())
}
