// Code generated by gf-codegen. DO NOT EDIT.
// 控制器 controller
// 生成日期：{{.table.UpdateTime}}
// 生成人：{{.table.FunctionAuthor}}

package api

import (
    {{if .table.IsRpc}}
	_ "dubbo.apache.org/dubbo-go/v3/imports"
    "github.com/WesleyWu/gf-dubbogo/util/dubbogo"
    {{end}}
	"github.com/WesleyWu/gf-httputils/util/jsonresponse"
    {{if .table.HasUpFileColumn}}
    "github.com/WesleyWu/gf-httputils/util/library"
    {{end}}
    "{{.table.BackendPackage}}{{if .table.SeparatePackage}}/{{.table.GoFileName}}{{end}}/model"
    {{if not .table.IsRpc}}
    "{{.table.BackendPackage}}{{if .table.SeparatePackage}}/{{.table.GoFileName}}{{end}}/service"
    {{end}}
    "github.com/gogf/gf/v2/net/ghttp"
	"github.com/gogf/gf/v2/util/gconv"
    "github.com/gogf/gf/v2/util/gvalid"
    {{if .table.HasCheckboxColumn}}
    "github.com/gogf/gf/v2/text/gstr"
    {{end}}
)

type {{.table.StructName}} struct {
}

var {{.table.ClassName}} = new({{.table.StructName}})
{{if .table.IsRpc}}
var {{.table.StructName}}Service = &model.{{.table.ClassName}}ClientImpl{}
func init() {
	dubbogo.AddConsumerReference("{{.table.ClassName}}ClientImpl", {{.table.StructName}}Service, "tri")
}
{{else}}
var {{.table.StructName}}Service = service.{{.table.ClassName}}
{{end}}

// List 列表
func (c *{{.table.StructName}}) List(r *ghttp.Request) {
	var req *model.{{.table.ClassName}}ListReq
	//获取参数
	if err := r.Parse(&req); err != nil {
		jsonresponse.Failed(r, err.(gvalid.Error).FirstError().Error())
		return
	}
	listRes, err := {{.table.StructName}}Service.GetList(r.Context(), req)
	if err != nil {
		jsonresponse.Failed(r, err.Error())
		return
	}
	jsonresponse.Success(r, listRes)
}

// Create 创建
func (c *{{.table.StructName}}) Create(r *ghttp.Request) {
    var req *model.{{.table.ClassName}}CreateReq
    //获取参数
    err := r.Parse(&req)
    if err != nil {
        jsonresponse.Failed(r, err.(gvalid.Error).FirstError().Error())
		return
    }
    {{range $index,$column:= .table.AddColumns}}
    {{if eq $column.HtmlType "checkbox"}}
    {{$column.HtmlField}} := r.Get("{{$column.HtmlField}}").Strings()
    if len({{$column.HtmlField}})>0{
        req.{{$column.GoField}} = gstr.Join({{$column.HtmlField}},",")
    }else{
        req.{{$column.GoField}} = ""
    }
    {{else if eq $column.HtmlType "images" "file" "files"}}
    for _,obj:=range req.{{$column.GoField}}{
        obj.Url,err = library.GetFilesPath(obj.Url)
        if err!=nil{
            jsonresponse.Failed(r, err.Error())
       		return
        }
    }
    {{end}}
    {{end}}
    _, err = {{.table.StructName}}Service.Create(r.Context(), req)
    if err != nil {
        jsonresponse.Failed(r, err.Error())
		return
    }
    jsonresponse.Success(r, "添加成功")
}

// Get 获取
func (c *{{.table.StructName}}) Get(r *ghttp.Request) {
	id := r.Get("id").{{.table.PkColumn.GoType | CaseCamel}}()
	info, err := {{.table.StructName}}Service.GetInfoById(r.Context(), &model.{{.table.ClassName}}InfoReq{Id: id})
	if err != nil {
		jsonresponse.Failed(r, err.Error())
		return
	}
	jsonresponse.Success(r, info)
}

// Update 更新
func (c *{{.table.StructName}}) Update(r *ghttp.Request) {
    var req *model.{{.table.ClassName}}UpdateReq
    //获取参数
    err := r.Parse(&req)
    if err != nil {
        jsonresponse.Failed(r, err.(gvalid.Error).FirstError().Error())
		return
    }
    {{range $index,$column:= .table.EditColumns}}
    {{if eq $column.HtmlType "checkbox"}}
    {{$column.HtmlField}} := r.Get("{{$column.HtmlField}}").Strings()
    if len({{$column.HtmlField}})>0{
       req.{{$column.GoField}} = gstr.Join({{$column.HtmlField}},",")
    }else{
       req.{{$column.GoField}} = ""
    }
    {{else if eq $column.HtmlType "images" "file" "files"}}
    for _,obj:=range req.{{$column.GoField}}{
        obj.Url,err = library.GetFilesPath(obj.Url)
        if err!=nil{
            jsonresponse.Failed(r, err.Error())
		    return
        }
    }
    {{end}}
    {{end}}
    _, err = {{.table.StructName}}Service.Update(r.Context(), req)
    if err != nil {
        jsonresponse.Failed(r, err.Error())
		return
    }
    jsonresponse.Success(r, "修改成功")
}

// Delete 删除
func (c *{{.table.StructName}}) Delete(r *ghttp.Request) {
	ids := gconv.{{.table.PkColumn.GoType | CaseCamel}}s(r.Get("ids").Slice())
	_, err := {{.table.StructName}}Service.DeleteByIds(r.Context(), &model.{{.table.ClassName}}DeleteReq{Ids: ids})
	if err != nil {
		jsonresponse.Failed(r, err.Error())
		return
	}
	jsonresponse.Success(r, "删除成功")
}

{{range $index,$column:= .table.ListColumns}}
{{if $column.IsInlineEditable}}
// Change{{$column.GoField}} 修改状态
func (c *{{$.table.StructName}}) Change{{$column.GoField}}(r *ghttp.Request){
    var req *model.{{$.table.ClassName}}Change{{$column.GoField}}Req
    //获取参数
    if err := r.Parse(&req); err != nil {
        jsonresponse.Failed(r, err.(gvalid.Error).FirstError().Error())
		return
    }
    if _, err := service.{{$.table.ClassName}}.Change{{$column.GoField}}(r.Context(), req); err != nil {
        jsonresponse.Failed(r, err.Error())
 		return
    }
    jsonresponse.Success(r, "状态设置成功")
}
{{end}}
{{end}}