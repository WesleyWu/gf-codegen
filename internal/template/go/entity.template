// Code generated by gf-codegen. DO NOT EDIT.
// 实体类 entity
// 生成日期：{{.table.UpdateTime}}
// 生成人：{{.table.FunctionAuthor}}

package entity

import (
    {{if .table.HasTimeColumn}}
    "github.com/gogf/gf/v2/os/gtime"
    {{end}}
	"github.com/gogf/gf/v2/util/gmeta"
)

// {{.table.ClassName}} is the golang structure for table {{.table.Name}}.
type {{.table.ClassName}} struct {
	gmeta.Meta   `orm:"table:{{.table.Name}}"`
	{{range $index, $column := .table.Columns}}
    {{$column.GoField}}    {{if or (eq $column.GoType "Time") (eq $column.GoType "date")}}*gtime.Time{{else}}{{$column.GoType}}{{end}}         `orm:"{{$column.Name}}{{if $column.IsPk}},primary{{end}}" json:"{{$column.HtmlField}}"`    // {{$column.Comment}}
    {{end}}
	{{range $index, $column := .table.VirtualColumns}}
    {{$column.GoField}}    {{if or (eq $column.GoType "Time") (eq $column.GoType "date")}}*gtime.Time{{else}}{{$column.GoType}}{{end}}         `json:"{{$column.HtmlField}}"`    // {{$column.Comment}}
    {{end}}
    {{range $ti, $relatedTable := .table.RelatedTables}}
    {{$relatedTable.ClassNameWhenRelated}}  *{{$relatedTable.ClassNameWhenRelated}}  `{{$relatedTable.OrmWithMapping}} json:"{{$relatedTable.JsonNameWhenRelated}}"`
    {{end}}
}

{{range $ti, $relatedTable := .table.RelatedTables}}
type {{$relatedTable.ClassNameWhenRelated}} struct {
	gmeta.Meta   `orm:"table:{{$relatedTable.Name}}"`
	{{range $ci, $relatedColumn := $relatedTable.RefColumns.Values}}
	{{$relatedColumn.GoField}}    {{if eq $relatedColumn.GoType "Time"}}*gtime.Time{{else}}{{$relatedColumn.GoType}}{{end}}         `orm:"{{$relatedColumn.Name}}" json:"{{$relatedColumn.HtmlField}}"`    // {{$relatedColumn.Comment}}
	{{end}}
    {{range $ti, $innerRelatedTable := $relatedTable.RelatedTables}}
    {{$innerRelatedTable.ClassNameWhenRelated}}  *{{$innerRelatedTable.ClassNameWhenRelated}}  `{{$innerRelatedTable.OrmWithMapping}} json:"{{$innerRelatedTable.JsonNameWhenRelated}}"`
    {{end}}
}
{{end}}

{{range $ri, $relatedTable := .table.RelatedTables}}
{{range $ii, $innerRelatedTable := $relatedTable.RelatedTables}}
type {{$innerRelatedTable.ClassNameWhenRelated}} struct {
	gmeta.Meta   `orm:"table:{{$innerRelatedTable.Name}}"`
    {{range $ci, $relatedColumn := $innerRelatedTable.RefColumns.Values}}
    {{$relatedColumn.GoField}}    {{if eq $relatedColumn.GoType "Time"}}*gtime.Time{{else}}{{$relatedColumn.GoType}}{{end}}         `orm:"{{$relatedColumn.Name}}" json:"{{$relatedColumn.HtmlField}}"`    // {{$relatedColumn.Comment}}
    {{end}}
}
{{end}}
{{end}}